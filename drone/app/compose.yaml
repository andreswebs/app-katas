---
name: drone-ci

# TODO: traefik

networks:
  drone-net:
    name: drone-net

services:
  drone-server:
    image: drone/drone:2
    container_name: drone-server
    restart: always
    networks:
      - drone-net
    volumes:
      - /var/lib/drone:/data
      - /etc/localtime:/etc/localtime:ro
    environment:
      - DRONE_SERVER_HOST
      - DRONE_SERVER_PROTO
      - DRONE_RPC_SECRET
      - DRONE_TLS_AUTOCERT
      - DRONE_GITLAB_SERVER
      - DRONE_GITLAB_CLIENT_ID
      - DRONE_GITLAB_CLIENT_SECRET
      - DRONE_DATABASE_SECRET
      - DRONE_USER_FILTER
      - DRONE_REGISTRATION_CLOSED
      - DRONE_S3_BUCKET
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_DEFAULT_REGION
      - AWS_REGION
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.drone.rule=Host(`${DRONE_SERVER_HOST}`)"
      - "traefik.http.routers.drone.entrypoints=web"
      - "traefik.http.routers.drone.middlewares=redirect-https"
      - "traefik.http.routers.drone-secure.rule=Host(`${DRONE_SERVER_HOST}`)"
      - "traefik.http.routers.drone-secure.entrypoints=web-secure"
      - "traefik.http.routers.drone-secure.service=drone-secure"
      - "traefik.http.routers.drone-secure.tls=true"
      - "traefik.http.routers.drone-secure.tls.certresolver=letsencrypt"
      - "traefik.http.services.drone-secure.loadbalancer.server.port=80"
      - "traefik.http.middlewares.redirect-https.redirectscheme.scheme=https"
      - "traefik.http.middlewares.redirect-https.redirectscheme.permanent=true"
      - "traefik.docker.network=drone-net"

  drone-runner:
    image: drone/drone-runner-docker:1
    container_name: drone-runner
    command: agent
    restart: always
    networks:
      - drone-net
    depends_on:
      - drone-server
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /etc/localtime:/etc/localtime:ro
    environment:
      - DRONE_RPC_HOST
      - DRONE_RPC_PROTO
      - DRONE_RPC_SECRET
      - DRONE_RUNNER_NAME
      - DRONE_RUNNER_CAPACITY
