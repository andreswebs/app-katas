---
name: drone-ci

networks:
  backend:
    name: drone
  proxy:
    name: proxy
    external: true

services:
  drone-server:
    image: drone/drone:2
    container_name: drone-server
    restart: always
    networks:
      - backend
      - proxy
    volumes:
      - /var/lib/drone:/data
      - /etc/localtime:/etc/localtime:ro
    environment:
      - DRONE_SERVER_HOST
      - DRONE_SERVER_PROTO
      - DRONE_RPC_SECRET
      - DRONE_TLS_AUTOCERT
      - DRONE_GITLAB_SERVER
      - DRONE_GITLAB_CLIENT_ID
      - DRONE_GITLAB_CLIENT_SECRET
      - DRONE_DATABASE_SECRET
      - DRONE_USER_FILTER
      - DRONE_REGISTRATION_CLOSED
      - DRONE_S3_BUCKET
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_DEFAULT_REGION
      - AWS_REGION
    labels:
      - traefik.enable=true
      - traefik.docker.network=proxy
      - traefik.http.routers.drone.rule=Host(`${DRONE_SERVER_HOST}`)
      - traefik.http.routers.drone.entrypoints=websecure
      - traefik.http.routers.drone.service=drone
      - traefik.http.routers.drone.tls=true
      - traefik.http.routers.drone.tls.certresolver=letsencrypt
      - traefik.http.services.drone.loadbalancer.server.port=80

  drone-runner:
    image: drone/drone-runner-docker:1
    container_name: drone-runner
    command: agent
    restart: always
    networks:
      - backend
    depends_on:
      - drone-server
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /etc/localtime:/etc/localtime:ro
    environment:
      - DRONE_RPC_HOST
      - DRONE_RPC_PROTO
      - DRONE_RPC_SECRET
      - DRONE_RUNNER_NAME
      - DRONE_RUNNER_CAPACITY
