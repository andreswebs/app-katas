---
name: twentycrm

networks:
  db:
    name: twentycrm-db

services:
  server:
    image: twentycrm/twenty:${TAG:-latest}
    restart: always

    volumes:
      - ${LOCAL_SERVER_DATA_DIR}:/app/packages/twenty-server/.local-storage

    ports:
      - ${SERVER_PORT:-3000}:${NODE_PORT}

    environment:
      - NODE_PORT

      - SERVER_URL
      - PG_DATABASE_URL
      - REDIS_URL

      - DISABLE_DB_MIGRATIONS
      - DISABLE_CRON_JOBS_REGISTRATION

      - STORAGE_TYPE
      - STORAGE_S3_REGION
      - STORAGE_S3_NAME
      - STORAGE_S3_ENDPOINT

      - APP_SECRET

    healthcheck:
      test: curl --fail http://localhost:${NODE_PORT}/healthz
      interval: 5s
      timeout: 5s
      retries: 20

    networks:
      - db

    depends_on:
      db:
        condition: service_healthy

  worker:
    image: twentycrm/twenty:${TAG:-latest}
    restart: always
    command: ["yarn", "worker:prod"]

    volumes:
      - ${LOCAL_SERVER_DATA_DIR}:/app/packages/twenty-server/.local-storage

    environment:
      - SERVER_URL
      - PG_DATABASE_URL
      - REDIS_URL

      - DISABLE_DB_MIGRATIONS="true" # it already runs on the server
      - DISABLE_CRON_JOBS_REGISTRATION="true" # it already runs on the server

      - STORAGE_TYPE
      - STORAGE_S3_REGION
      - STORAGE_S3_NAME
      - STORAGE_S3_ENDPOINT

      - APP_SECRET

    networks:
      - db

    depends_on:
      db:
        condition: service_healthy
      server:
        condition: service_healthy

  db:
    image: postgres:16
    restart: always

    environment:
      - PGDATA
      - POSTGRES_DB
      - POSTGRES_USER
      - POSTGRES_PASSWORD

    volumes:
      - ${LOCAL_DB_DATA_DIR}:${POSTGRES_DATA_DIR}

    healthcheck:
      test: pg_isready -U ${POSTGRES_USER} -h localhost -d ${POSTGRES_DB}
      timeout: 5s
      interval: 5s
      retries: 10

    networks:
      - db

  redis:
    image: redis
    restart: always
    command: [--maxmemory-policy, noeviction]

    networks:
      - db
