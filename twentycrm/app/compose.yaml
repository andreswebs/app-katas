---
name: twentycrm

networks:
  db:
    name: twentycrm-db
  proxy:
    name: proxy
    external: true

services:
  server:
    image: twentycrm/twenty:${TWENTYCRM_VERSION:-latest}
    restart: always

    volumes:
      - ${LOCAL_SERVER_DATA_DIR}:/app/packages/twenty-server/.local-storage

    ports:
      - ${SERVER_PORT:-3000}:${NODE_PORT}

    environment:
      - NODE_PORT

      - APP_SECRET

      - SERVER_URL
      - PG_DATABASE_URL
      - REDIS_URL

      - DISABLE_DB_MIGRATIONS
      - DISABLE_CRON_JOBS_REGISTRATION

      - STORAGE_TYPE
      - STORAGE_S3_NAME
      - STORAGE_S3_REGION
      - STORAGE_S3_ENDPOINT
      - STORAGE_S3_ACCESS_KEY_ID
      - STORAGE_S3_SECRET_ACCESS_KEY

    healthcheck:
      test: curl --fail http://localhost:${NODE_PORT}/healthz
      interval: 5s
      timeout: 5s
      retries: 20

    networks:
      - db
      - proxy

    labels:
      - traefik.enable=true
      - traefik.docker.network=proxy
      - traefik.http.routers.twentycrm.rule=Host(`${TWENTYCRM_HOST}`)
      - traefik.http.routers.twentycrm.entrypoints=websecure
      - traefik.http.routers.twentycrm.service=twentycrm
      - traefik.http.routers.twentycrm.tls=true
      - traefik.http.routers.twentycrm.tls.certresolver=letsencrypt
      - traefik.http.services.twentycrm.loadbalancer.server.port=${SERVER_PORT}

    # depends_on:
    #   db:
    #     condition: service_healthy

  worker:
    image: twentycrm/twenty:${TWENTYCRM_VERSION:-latest}
    restart: always
    command: ["yarn", "worker:prod"]

    volumes:
      - ${LOCAL_SERVER_DATA_DIR}:/app/packages/twenty-server/.local-storage

    environment:
      - APP_SECRET

      - SERVER_URL
      - PG_DATABASE_URL
      - REDIS_URL

      - DISABLE_DB_MIGRATIONS=true # it already runs on the server
      - DISABLE_CRON_JOBS_REGISTRATION=true # it already runs on the server

      - STORAGE_TYPE
      - STORAGE_S3_NAME
      - STORAGE_S3_REGION
      - STORAGE_S3_ENDPOINT
      - STORAGE_S3_ACCESS_KEY_ID
      - STORAGE_S3_SECRET_ACCESS_KEY

    networks:
      - db

    depends_on:
      # db:
      #   condition: service_healthy
      server:
        condition: service_healthy

  # db:
  #   image: postgres:16
  #   restart: always

  #   environment:
  #     - PGDATA
  #     - POSTGRES_DB
  #     - POSTGRES_USER
  #     - POSTGRES_PASSWORD

  #   volumes:
  #     - ${LOCAL_DB_DATA_DIR}:${POSTGRES_DATA_DIR}

  #   healthcheck:
  #     test: pg_isready -U ${POSTGRES_USER} -h localhost -d ${POSTGRES_DB}
  #     timeout: 5s
  #     interval: 5s
  #     retries: 10

  #   networks:
  #     - db

  redis:
    image: redis
    restart: always
    command: [--maxmemory-policy, noeviction]

    networks:
      - db
